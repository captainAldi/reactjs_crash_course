{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/layout/Footer.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","style","this","type","onChange","markComplete","bind","id","title","onClick","delTodo","btnStyle","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","display","placeholder","flex","className","Footer","About","App","axios","post","then","res","data","delete","filter","get","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a2ccd5c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class TodoItem extends Component {\n\tgetStyle = () => {\n\t\t\treturn {\n\t\t\t\tbackground: '#f4f4f4',\n\t\t\t\tpadding: '10px',\n\t\t\t\tborderBottom: '1px #ccc dotted',\n\t\t\t\ttextDecoration: this.props.todo.completed ? 'line-through' : 'none'\n\t\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={this.getStyle()}>\n\t\t\t\t<p>\n\t\t\t\t\t<input type=\"checkbox\" onChange={this.props.markComplete.bind(\n\t\t\t\t\t\tthis, this.props.todo.id\n\t\t\t\t\t)}/> {' '}\n\t\t\t\t\t{ this.props.todo.title }\n\t\t\t\t\t<button onClick={this.props.delTodo.bind(this, this.props.todo.id)} style={btnStyle}>x</button>\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nTodoItem.propTypes = {\n\ttodo: PropTypes.object.isRequired,\n\t\tmarkComplete: PropTypes.func.isRequired,\n\tdelTodo: PropTypes.func.isRequired,\n}\n\n//Style 1\n//style={{ backgroundColor: '#f4f4f4' }}\n\n//Style 2\n// const itemStyle = {\n// \tbackgroundColor: '#f4f4f4'\n// }\n\n//btnStyle\nconst btnStyle = {\n\tbackground: '#ff0000',\n\tcolor: '#fff',\n\tborder: 'none',\n\tpadding: '5px 10px',\n\tborderRadius: '50%',\n\tcursor: 'pointer',\n\tfloat: 'right'\n}\n\nexport default TodoItem\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem'\nimport PropTypes from 'prop-types'\n\nclass Todos extends Component {\n\trender() {\n\t\treturn this.props.todos.map((todo) => (\n\t\t\t<TodoItem key={todo.id} delTodo={this.props.delTodo} todo={todo} markComplete={this.props.markComplete}/>\n\t\t));\n\t}\n}\n\n//Validasi Props\nTodos.propTypes = {\n\ttodos: PropTypes.array.isRequired,\n\tmarkComplete: PropTypes.func.isRequired,\n\tdelTodo: PropTypes.func.isRequired,\n}\n\n\nexport default Todos;\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst headerStyle = {\n\tbackground: '#333',\n\tcolor: '#fff',\n\ttextAlign: 'center',\n\tpadding: '10px'\n}\n\nconst linkStyle = {\n\tcolor: '#fff',\n\ttextDecoration: 'none'\n}\n\nexport default function Header() {\n\treturn (\n\t\t<header style={headerStyle}>\n\t\t\t<h1>Todo List</h1>\n\t\t\t<Link style={linkStyle} to=\"/\">Home</Link> | <Link style={linkStyle} to=\"/about\">About</Link>\n\t\t</header>\n\t)\n}\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\n\nexport class AddTodo extends Component {\n\tstate = {\n\t\ttitle: ''\n\t}\n\n\tonChange = (e) => this.setState({ [e.target.name] : e.target.value })\n\n\tonSubmit = (e) => {\n\t\te.preventDefault()\n\t\tthis.props.addTodo(this.state.title)\n\t\tthis.setState({title: ''})\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<form style={{ display: 'flex' }} onSubmit={this.onSubmit}>\n\t\t\t\t<input \n\t\t\t\t\ttype=\"text\"\n\t\t\t\t\tname=\"title\"\n\t\t\t\t\tplaceholder=\"Add Todo...\"\n\t\t\t\t\tstyle={{ flex: '10', padding: '10px' }}\n\t\t\t\t\tvalue={this.state.title}\n\t\t\t\t\tonChange={this.onChange}\t\n\t\t\t\t/>\n\n\n\t\t\t\t<input type=\"submit\" value=\"submit\" className=\"btn\" style={{flex: '1'}}/>\n\t\t\t</form>\n\t\t)\n\t}\n}\n\nAddTodo.propTypes = {\n\taddTodo: PropTypes.func.isRequired,\n}\n\nexport default AddTodo\n","import React, { Component } from 'react'\n\nexport class Footer extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"footer\">\n\t\t\t\tby <strong>Renaldi Yulvianda</strong>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Footer\n","import React from 'react'\n\nexport default function About() {\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<h1>\n\t\t\t\t\tAbout\n\t\t\t\t</h1>\n\n\t\t\t\t<p>Ini Halaman About</p>\n\t\t\t</header>\n\t\t</div>\n\t)\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport Todos from './components/Todos'\nimport Header from './components/layout/Header'\nimport AddTodo from './components/AddTodo'\nimport Footer from './components/layout/Footer'\nimport About from './components/pages/About'\n//import uuid from 'uuid'\nimport axios from 'axios'\n\nclass App extends Component {\n\tstate = {\n\t\ttodos: []\n\t}\n\n\t// *** UNTUK BACKEND ***\n\tcomponentDidMount() {\n\t\taxios.get('https://jsonplaceholder.typicode.com/todos?_limit=10')\n\t\t\t.then(res => this.setState({ todos: res.data }))\n\t}\n\n\t//Add Todo\n\taddTodo = (title) => {\n\t\taxios.post('https://jsonplaceholder.typicode.com/todos', {\n\t\t\ttitle: title,\n\t\t\tcompleted: false\n\t\t})\n\t\t\t.then(res => this.setState({ todos: [...this.state.todos, res.data] }))\n\t}\n\n//Delete Todo\ndelTodo = (id) => {\n\taxios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`)\n\t\t.then(res => this.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] }))\n}\n\n\n\t// *** UNTUK UI ****\n\n\t// //Toggle Complete\n\tmarkComplete = (id) => {\n\t\tthis.setState({ todos: this.state.todos.map(todo => {\n\t\t\tif(todo.id === id){\n\t\t\t\ttodo.completed = !todo.completed\n\t\t\t}\n\t\t\treturn todo\n\t\t}) })\n\t}\n\n\t//Toggle Delete\n\t// delTodo = (id) => {\n\t// \tthis.setState({ todos: [...this.state.todos.filter(todo => todo.id !== id)] })\n\t// }\n\n\t// //Add Todo\n\t// addTodo = (title) => {\n\t// \tconst newTodo = {\n\t// \t\tid: uuid.v4(),\n\t// \t\ttitle: title,\n\t// \t\tcompleted: false\n\t// \t}\n\t// \tthis.setState({ todos: [...this.state.todos, newTodo] })\n\t// }\n\n render() {\n\t\treturn (\n    <Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t\t<Header />\n\n\t\t\t\t\t\t<Route \n\t\t\t\t\t\t\texact\n\t\t\t\t\t\t\tpath=\"/\"\n\t\t\t\t\t\t\trender={props => (\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<AddTodo addTodo={this.addTodo}/>\n\t\t\t\t\t\t\t\t\t<Todos delTodo={this.delTodo} todos={this.state.todos} markComplete={this.markComplete}/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/about\"\n\t\t\t\t\t\t\tcomponent={About}\n\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t<Footer/>\n    </div>\n\t\t\t\t</Router>\n  );\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}